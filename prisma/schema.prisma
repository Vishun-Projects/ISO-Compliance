// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  role          UserRole  @default(EMPLOYEE)
  department    String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Document relationships
  createdDocuments    Document[] @relation("DocumentCreator")
  assignedDocuments   Document[] @relation("DocumentAssignee")
  documentApprovals   DocumentApproval[]
  documentAcks        DocumentAcknowledgment[]
  
  // Audit trail
  auditLogs          AuditLog[]

  @@map("users")
}

model Document {
  id              String           @id @default(cuid())
  title           String
  description     String?
  content         String? @db.Text
  fileUrl         String?
  fileName        String?
  fileSize        Int?
  mimeType        String?
  version         Int              @default(1)
  status          DocumentStatus   @default(DRAFT)
  category        String?
  tags            String? @db.Text // Store as JSON string for MySQL
  isPublic        Boolean          @default(false)
  
  // Relationships
  creatorId       String
  creator         User             @relation("DocumentCreator", fields: [creatorId], references: [id])
  assigneeId      String?
  assignee        User?            @relation("DocumentAssignee", fields: [assigneeId], references: [id])
  
  // Workflow
  approvals       DocumentApproval[]
  acknowledgments DocumentAcknowledgment[]
  
  // Timestamps
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  publishedAt     DateTime?
  expiresAt       DateTime?

  @@map("documents")
}

model DocumentApproval {
  id          String           @id @default(cuid())
  documentId  String
  document    Document         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  approverId  String
  approver    User             @relation(fields: [approverId], references: [id])
  status      ApprovalStatus   @default(PENDING)
  comments    String? @db.Text
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([documentId, approverId])
  @@map("document_approvals")
}

model DocumentAcknowledgment {
  id          String    @id @default(cuid())
  documentId  String
  document    Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  acknowledged Boolean  @default(false)
  acknowledgedAt DateTime?
  createdAt   DateTime  @default(now())

  @@unique([documentId, userId])
  @@map("document_acknowledgments")
}

model AuditLog {
  id          String      @id @default(cuid())
  action      String      // CREATE, UPDATE, DELETE, VIEW, APPROVE, etc.
  entityType  String      // Document, User, etc.
  entityId    String
  userId      String?
  user        User?       @relation(fields: [userId], references: [id])
  details     String? @db.Text // Store as JSON string for MySQL
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime    @default(now())

  @@map("audit_logs")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
  AUDITOR
}

enum DocumentStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
  EXPIRED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
